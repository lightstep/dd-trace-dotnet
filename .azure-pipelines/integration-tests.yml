trigger: none
pr:
  branches:
    include:
      - master
  paths:
    exclude:
      - docs/*
      - .github/*

variables:
  buildConfiguration: Debug
  packageFeed: /ffc32c57-3e0e-4e8f-8633-a7ad01df2e45
  publishOutput: $(Build.SourcesDirectory)/src/bin/managed-publish

jobs:

- job: Linux
  strategy:
    matrix:
      netcoreapp2_1:
        dotnetCoreSdkVersion: 2.1.x
        publishTargetFramework: netcoreapp2.1
      netcoreapp3_0:
        dotnetCoreSdkVersion: 3.0.x
        publishTargetFramework: netcoreapp3.0
      netcoreapp3_1:
        dotnetCoreSdkVersion: 3.1.x
        publishTargetFramework: netcoreapp3.1

  pool:
    vmImage: ubuntu-16.04
  
  variables:
    TestAllPackageVersions: true

  steps:
  - task: DockerCompose@0
    displayName: docker-compose run build
    inputs:
      containerregistrytype: Container Registry
      dockerComposeCommand: run -e TestAllPackageVersions=true -e buildConfiguration=$(buildConfiguration) -e publishTargetFramework=$(publishTargetFramework) build

  - task: DockerCompose@0
    displayName: docker-compose run Profiler
    inputs:
      containerregistrytype: Container Registry
      dockerComposeCommand: run Profiler

  - task: DockerCompose@0
    displayName: docker-compose run IntegrationTests
    inputs:
      containerregistrytype: Container Registry
      dockerComposeCommand: run -e TestAllPackageVersions=true -e buildConfiguration=$(buildConfiguration) -e publishTargetFramework=$(publishTargetFramework) IntegrationTests

  - task: PublishTestResults@2
    displayName: publish test results
    inputs:
      testResultsFormat: VSTest
      testResultsFiles: test/**/*.trx
    condition: succeededOrFailed()

- job: Windows

  pool:
    vmImage: windows-2019

  variables:
    buildPlatform: 'x64'

  steps:
  - task: UseDotNet@2
    displayName: install dotnet core sdk 2.1
    inputs:
      packageType: sdk
      version: 2.1.x

  - task: UseDotNet@2
    displayName: install dotnet core sdk 3.0
    inputs:
      packageType: sdk
      version: 3.0.x

  - task: UseDotNet@2
    displayName: install dotnet core sdk 3.1
    inputs:
      packageType: sdk
      version: 3.1.x

  - task: DotNetCoreCLI@2
    displayName: dotnet build src/**/*.csproj
    inputs:
      command: build
      projects: |
        src/**/*.csproj
      arguments: --configuration $(buildConfiguration)

  - task: DotNetCoreCLI@2
    displayName: dotnet publish Datadog.Trace.ClrProfiler.Managed --framework net45
    inputs:
      command: publish
      publishWebProjects: false
      modifyOutputPath: false
      zipAfterPublish: false
      projects: src/Datadog.Trace.ClrProfiler.Managed/Datadog.Trace.ClrProfiler.Managed.csproj
      arguments: --configuration $(buildConfiguration) --framework net45 --output $(publishOutput)/net45

  - task: DotNetCoreCLI@2
    displayName: dotnet publish Datadog.Trace.ClrProfiler.Managed --framework net461
    inputs:
      command: publish
      publishWebProjects: false
      modifyOutputPath: false
      zipAfterPublish: false
      projects: src/Datadog.Trace.ClrProfiler.Managed/Datadog.Trace.ClrProfiler.Managed.csproj
      arguments: --configuration $(buildConfiguration) --framework net461 --output $(publishOutput)/net461

  - task: DotNetCoreCLI@2
    displayName: dotnet publish Datadog.Trace.ClrProfiler.Managed --framework netstandard2.0
    inputs:
      command: publish
      publishWebProjects: false
      modifyOutputPath: false
      zipAfterPublish: false
      projects: src/Datadog.Trace.ClrProfiler.Managed/Datadog.Trace.ClrProfiler.Managed.csproj
      arguments: --configuration $(buildConfiguration) --framework netstandard2.0 --output $(publishOutput)/netstandard2.0

  - task: NuGetCommand@2
    displayName: nuget restore native
    inputs:
      restoreSolution: Datadog.Trace.Native.sln
      verbosityRestore: Normal

  - task: MSBuild@1
    displayName: msbuild native
    inputs:
      solution: Datadog.Trace.proj
      platform: $(buildPlatform)
      configuration: $(buildConfiguration)
      msbuildArguments: /t:BuildCpp
      maximumCpuCount: true

  - task: NuGetCommand@2
    displayName: 'nuget restore reproductions/**/packages.config'
    inputs:
      restoreSolution: reproductions/**/packages.config
      restoreDirectory: $(Build.SourcesDirectory)/packages
      verbosityRestore: Normal

  - task: MSBuild@1
    displayName: 'Build .NET Framework projects (not SDK-based projects)'
    inputs:
      solution: Datadog.Trace.proj
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'
      msbuildArguments: '/t:BuildFrameworkReproductions'
      maximumCpuCount: true

  - task: DotNetCoreCLI@2
    displayName: dotnet restore
    inputs:
      command: restore
      projects: |
        reproductions/**/*.csproj
        samples/**/*.csproj
        test/Datadog.Trace.ClrProfiler.IntegrationTests/Datadog.Trace.ClrProfiler.IntegrationTests.csproj
        !reproductions/**/ExpenseItDemo*.csproj
        !reproductions/**/EntityFramework6x*.csproj

  - task: DotNetCoreCLI@2
    displayName: dotnet build integration tests
    inputs:
      command: build
      projects: |
        reproductions/**/*.csproj
        samples/**/*.csproj
        test/Datadog.Trace.ClrProfiler.IntegrationTests/Datadog.Trace.ClrProfiler.IntegrationTests.csproj
        !reproductions/**/ExpenseItDemo*.csproj
        !reproductions/**/EntityFramework6x*.csproj
      arguments: --configuration $(buildConfiguration) -p:Platform=$(buildPlatform) -p:ManagedProfilerOutputDirectory=$(publishOutput)

#  - task: MSBuild@1
#    displayName: 'Build sample apps (x64 or x86)'
#    inputs:
#      solution: Datadog.Trace.proj
#      platform: '$(buildPlatform)'
#      configuration: '$(buildConfiguration)'
#      msbuildArguments: '/t:BuildSamples'
#      maximumCpuCount: true

#  - script: |
#    choco install redis-64
#    redis-server --service-install
#    redis-server --service-start
#    displayName: 'Install Redis'

#  - script: |
#    choco install elasticsearch
#    net start elasticsearch-service-x64
#    displayName: 'Install Elasticsearch'

#  - task: PowerShell@2
#    displayName: 'PowerShell Script'
#    inputs:
#      targetType: filePath
#      filePath: './ci/install-sqlserver.ps1'
#    enabled: false

  - task: DotNetCoreCLI@2
    displayName: dotnet test
    inputs:
      command: test
      configuration: $(buildConfiguration)
      projects: test/Datadog.Trace.ClrProfiler.IntegrationTests/Datadog.Trace.ClrProfiler.IntegrationTests.csproj
      arguments: '--filter "RunOnWindows=True|Category=Smoke" -p:Platform=$(buildPlatform)'
