trigger:
  branches:
    include:
      - refs/tags/*
pr: none

variables:
  buildConfiguration: release
  dotnetCoreSdkVersion: 3.1.x
  publishOutput: $(Build.SourcesDirectory)/src/bin/managed-publish

jobs:

#### NuGet packages and Windows msi installer

- job: nuget_and_windows_msi_and_home
  strategy:
    matrix:
      x64:
        buildPlatform: x64
        nugetPack: true
      x86:
        buildPlatform: x86
        nugetPack: false

  pool:
    vmImage: windows-2019

  steps:

  - task: gittools.gitversion.gitversion-task.GitVersion@4
    displayName: GitVersion
    inputs:
      preferBundledVersion: false

  - task: UseDotNet@2
    displayName: install dotnet core sdk
    inputs:
      packageType: sdk
      version: $(dotnetCoreSdkVersion)

  - task: NuGetCommand@2
    displayName: nuget restore native
    inputs:
      restoreSolution: Datadog.Trace.Native.sln
      verbosityRestore: Normal

  - task: DotNetCoreCLI@2
    displayName: dotnet restore
    inputs:
      command: restore
      projects: src/**/*.csproj

  - task: DotNetCoreCLI@2
    displayName: dotnet build
    inputs:
      command: build
      projects: src/**/*.csproj
      arguments: --configuration $(buildConfiguration)

  - task: DotNetCoreCLI@2
    displayName: dotnet pack
    condition: and(succeeded(), eq(variables['nugetPack'], 'true'))
    inputs:
      command: pack
      packagesToPack: src/Datadog.Trace/Datadog.Trace.csproj;src/Datadog.Trace.OpenTracing/Datadog.Trace.OpenTracing.csproj
      packDirectory: nuget-output
      configuration: $(buildConfiguration)

  - task: PublishPipelineArtifact@0
    displayName: publish nuget artifacts
    condition: and(succeeded(), eq(variables['nugetPack'], 'true'))
    inputs:
      artifactName: nuget-packages
      targetPath: nuget-output

  - task: MSBuild@1
    displayName: msbuild msi
    inputs:
      solution: Datadog.Trace.proj
      platform: $(buildPlatform)
      configuration: $(buildConfiguration)
      msbuildArguments: /t:msi /p:RunWixToolsOutOfProc=true
      maximumCpuCount: true
      
  - task: MSBuild@1
    displayName: msbuild tracer-home
    condition: eq(variables['buildPlatform'], 'x64')
    inputs:
      solution: Datadog.Trace.proj
      platform: $(buildPlatform)
      configuration: $(buildConfiguration)
      msbuildArguments: /t:CreateHomeDirectory
      maximumCpuCount: true

  - task: PublishPipelineArtifact@0
    displayName: publish msi artifact
    inputs:
      artifactName: windows-msi-$(buildPlatform)
      targetPath: deploy/Datadog.Trace.ClrProfiler.WindowsInstaller/bin/$(buildConfiguration)/$(buildPlatform)/en-us

  - task: PublishPipelineArtifact@0
    displayName: publish tracerhome artifact
    condition: eq(variables['buildPlatform'], 'x64')
    inputs:
      artifactName: windows-tracer-home
      targetPath: src/bin/windows-tracer-home.zip

#### Linux packages

- job: linux_packages

  pool:
    vmImage: ubuntu-16.04

  steps:
  - task: UseDotNet@2
    displayName: install dotnet core sdk
    inputs:
      version: $(dotnetCoreSdkVersion)

  - task: DotNetCoreCLI@2
    displayName: dotnet restore
    inputs:
      command: restore
      projects: src/**/*.csproj

  - task: DotNetCoreCLI@2
    displayName: dotnet build
    inputs:
      command: build
      projects: src/**/*.csproj
      arguments: --configuration $(buildConfiguration)

  - task: DotNetCoreCLI@2
    displayName: dotnet publish Datadog.Trace.ClrProfiler.Managed --framework netstandard2.0
    inputs:
      command: publish
      publishWebProjects: false
      modifyOutputPath: false
      zipAfterPublish: false
      projects: src/Datadog.Trace.ClrProfiler.Managed/Datadog.Trace.ClrProfiler.Managed.csproj
      arguments: --configuration $(buildConfiguration) --framework netstandard2.0 --output $(publishOutput)/netstandard2.0

  - task: DockerCompose@0
    displayName: docker-compose run Profiler
    inputs:
      containerregistrytype: Container Registry
      dockerComposeCommand: run Profiler

  - task: DockerCompose@0
    displayName: docker-compose run package
    inputs:
      containerregistrytype: Container Registry
      dockerComposeCommand: run package

  - task: PublishPipelineArtifact@0
    displayName: publish artifacts
    inputs:
      artifactName: linux-packages
      targetPath: deploy/linux

- job: linux_alpine_packages

  pool:
    vmImage: ubuntu-16.04

  steps:
  - task: UseDotNet@2
    displayName: install dotnet core sdk
    inputs:
      version: $(dotnetCoreSdkVersion)

  - task: DotNetCoreCLI@2
    displayName: dotnet restore
    inputs:
      command: restore
      projects: src/**/*.csproj

  - task: DotNetCoreCLI@2
    displayName: dotnet build
    inputs:
      command: build
      projects: src/**/*.csproj
      arguments: --configuration $(buildConfiguration)

  - task: DotNetCoreCLI@2
    displayName: dotnet publish Datadog.Trace.ClrProfiler.Managed --framework netstandard2.0
    inputs:
      command: publish
      publishWebProjects: false
      modifyOutputPath: false
      zipAfterPublish: false
      projects: src/Datadog.Trace.ClrProfiler.Managed/Datadog.Trace.ClrProfiler.Managed.csproj
      arguments: --configuration $(buildConfiguration) --framework netstandard2.0 --output $(publishOutput)/netstandard2.0

  - task: DockerCompose@0
    displayName: docker-compose run Profiler.Alpine
    inputs:
      containerregistrytype: Container Registry
      dockerComposeCommand: run Profiler.Alpine

  - task: DockerCompose@0
    displayName: docker-compose run package.alpine
    inputs:
      containerregistrytype: Container Registry
      dockerComposeCommand: run package.alpine

  - task: PublishPipelineArtifact@0
    displayName: publish artifacts
    inputs:
      artifactName: linux-alpine-packages
      targetPath: deploy/linux