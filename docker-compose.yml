version: '3'
services:
  AWSSDKSQS:
    image: softwaremill/elasticmq
    ports:
    - "127.0.0.1:9324:9324"

  servicestackredis:
    image: redis:4-alpine
    command: redis-server --bind 0.0.0.0
    ports:
    - "127.0.0.1:6379:6379"

  stackexchangeredis:
    image: redis:4-alpine
    command: redis-server --bind 0.0.0.0
    ports:
    - "127.0.0.1:6389:6379"

  mongo:
    image: mongo:4.0.9
    ports:
      - "127.0.0.1:27017:27017"
    command: mongod

  elasticsearch6:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.4.2
    ports:
    - "127.0.0.1:9200:9200"
    - "127.0.0.1:9300:9300"
    environment:
    - discovery.type=single-node

  elasticsearch5:
    image: docker.elastic.co/elasticsearch/elasticsearch:5.6.16
    ports:
    - "127.0.0.1:9205:9200"
    - "127.0.0.1:9305:9300"
    environment:
    - discovery.type=single-node

  postgres:
    image: postgres:10.5-alpine
    environment:
    - POSTGRES_PASSWORD=postgres
    - POSTGRES_USER=postgres
    - POSTGRES_DB=postgres
    ports:
    - "127.0.0.1:5432:5432"

  mysql:
    image: mysql/mysql-server:5.7
    environment:
    - MYSQL_DATABASE=world
    - MYSQL_ROOT_PASSWORD=mysqldb
    - MYSQL_USER=mysqldb
    - MYSQL_PASSWORD=mysqldb
    ports:
    - "127.0.0.1:3307:3306"

  sqlserver:
    image: mcr.microsoft.com/mssql/server:latest
    ports:
    - "127.0.0.1:1433:1433"
    environment:
    - ACCEPT_EULA=Y
    - SA_PASSWORD=Strong!Passw0rd

  wcfservice:
    image: mcr.microsoft.com/dotnet/framework/wcf:4.8
    ports:
    - "127.0.0.1:8585:8585"

  build:
    build:
      context: ./
      dockerfile: ./docker/dotnet.dockerfile
    image: datadog-dotnet
    environment:
    - buildConfiguration=${buildConfiguration}
    - publishTargetFramework=${publishTargetFramework}
    command: /project/docker/build.sh
    volumes:
    - ./:/project

  package:
    build:
      context: ./
      dockerfile: ./docker/package.dockerfile
    image: datadog-package
    command: /project/docker/package.sh
    volumes:
    - ./:/project

  Profiler:
    build:
      context: ./
      dockerfile: ./docker/native.dockerfile
    image: datadog-native
    command: /project/docker/Datadog.Trace.ClrProfiler.Native.sh
    volumes:
    - ./:/project

  Samples.AWSSDK.SQS:
    build:
      context: ./
      dockerfile: ./docker/dotnet.dockerfile
    image: datadog-dotnet
    command: bash -c "/project/docker/with-profiler-logs.bash wait-for-it host.docker.internal:9324 -- /project/docker/with-profiler.bash dotnet /project/samples/Samples.AWSSDK.SQS/bin/Release/netcoreapp2.1/publish/Samples.AWSSDK.SQS.dll"
    environment:
    - AWSSDK_SQS_HOST=host.docker.internal:9324
    volumes:
    - ./:/project
    depends_on:
    - AWSSDKSQS

  Samples.ServiceStack.Redis:
    build:
      context: ./
      dockerfile: ./docker/dotnet.dockerfile
    image: datadog-dotnet
    command: bash -c "/project/docker/with-profiler-logs.bash wait-for-it servicestackredis:6379 -- /project/docker/with-profiler.bash dotnet /project/samples/Samples.ServiceStack.Redis/bin/${buildConfiguration}/${publishTargetFramework}/publish/Samples.ServiceStack.Redis.dll"
    volumes:
    - ./:/project
    environment:
    - SERVICESTACK_REDIS_HOST=servicestackredis:6379
    depends_on:
    - servicestackredis

  Samples.StackExchange.Redis:
    build:
      context: ./
      dockerfile: ./docker/dotnet.dockerfile
    image: datadog-dotnet
    command: bash -c "/project/docker/with-profiler-logs.bash wait-for-it stackexchangeredis:6379 -- /project/docker/with-profiler.bash dotnet /project/samples/Samples.StackExchange.Redis/bin/${buildConfiguration}/${publishTargetFramework}/publish/Samples.StackExchange.Redis.dll"
    volumes:
    - ./:/project
    environment:
    - STACKEXCHANGE_REDIS_HOST=stackexchangeredis:6379
    depends_on:
    - stackexchangeredis

  Samples.Elasticsearch:
    build:
      context: ./
      dockerfile: ./docker/dotnet.dockerfile
    image: datadog-dotnet
    command: bash -c "/project/docker/with-profiler-logs.bash wait-for-it elasticsearch6:9200 -- /project/docker/with-profiler.bash dotnet /project/samples/Samples.Elasticsearch/bin/${buildConfiguration}/${publishTargetFramework}/publish/Samples.Elasticsearch.dll"
    volumes:
    - ./:/project
    environment:
    - ELASTICSEARCH6_HOST=elasticsearch6:9200
    depends_on:
    - elasticsearch6


  Samples.Elasticsearch.V5:
    build:
      context: ./
      dockerfile: ./docker/dotnet.dockerfile
    image: datadog-dotnet
    command: bash -c "/project/docker/with-profiler-logs.bash wait-for-it elasticsearch5:9200 -- /project/docker/with-profiler.bash dotnet /project/samples/Samples.Elasticsearch.V5/bin/${buildConfiguration}/${publishTargetFramework}/publish/Samples.Elasticsearch.V5.dll"
    volumes:
    - ./:/project
    environment:
    - ELASTICSEARCH5_HOST=elasticsearch5:9200
    depends_on:
    - elasticsearch5

  Samples.SqlServer:
    build:
      context: ./
      dockerfile: ./docker/dotnet.dockerfile
    image: datadog-dotnet
    command: bash -c "/project/docker/with-profiler-logs.bash wait-for-it sqlserver:1433 -- /project/docker/with-profiler.bash dotnet /project/samples/Samples.SqlServer/bin/${buildConfiguration}/${publishTargetFramework}/publish/Samples.SqlServer.dll"
    volumes:
    - ./:/project
    environment:
    - SQLSERVER_CONNECTION_STRING=Server=sqlserver;User=sa;Password=Strong!Passw0rd
    depends_on:
    - sqlserver

  Samples.Npgsql:
    build:
      context: ./
      dockerfile: ./docker/dotnet.dockerfile
    image: datadog-dotnet
    command: bash -c "/project/docker/with-profiler-logs.bash wait-for-it postgres:5432 -- /project/docker/with-profiler.bash dotnet /project/samples/Samples.NpgSql/bin/${buildConfiguration}/${publishTargetFramework}/publish/Samples.NpgSql.dll"
    volumes:
    - ./:/project
    environment:
    - POSTGRES_HOST=postgres
    depends_on:
    - postgres

  Samples.MySql:
    build:
      context: ./
      dockerfile: ./docker/dotnet.dockerfile
    image: datadog-dotnet
    command: bash -c "/project/docker/with-profiler-logs.bash wait-for-it mysql:3306 -- /project/docker/with-profiler.bash dotnet /project/samples/Samples.MySql/bin/${buildConfiguration}/${publishTargetFramework}/publish/Samples.MySql.dll"
    volumes:
    - ./:/project
    environment:
    - MYSQL_HOST=mysql
    - MYSQL_PORT=3306
    depends_on:
    - mysql

  Samples.MongoDB:
    build:
      context: ./
      dockerfile: ./docker/dotnet.dockerfile
    image: datadog-dotnet
    command: bash -c "/project/docker/with-profiler-logs.bash wait-for-it mongo:27017 -- /project/docker/with-profiler.bash dotnet /project/samples/Samples.MongoDB/bin/${buildConfiguration}/${publishTargetFramework}/publish/Samples.MongoDB.dll"
    volumes:
    - ./:/project
    depends_on:
    - mongo

  IntegrationTests:
    build:
      context: ./
      dockerfile: ./docker/dotnet.dockerfile
    image: datadog-dotnet
    command: /project/docker/Datadog.Trace.ClrProfiler.IntegrationTests.sh
    volumes:
    - ./:/project
    environment:
    - MONGO_HOST=mongo
    - SERVICESTACK_REDIS_HOST=servicestackredis:6379
    - STACKEXCHANGE_REDIS_HOST=stackexchangeredis:6379
    - ELASTICSEARCH6_HOST=elasticsearch6:9200
    - ELASTICSEARCH5_HOST=elasticsearch5:9200
    - SQLSERVER_CONNECTION_STRING=Server=sqlserver;User=sa;Password=Strong!Passw0rd
    - POSTGRES_HOST=postgres
    - MYSQL_HOST=mysql
    - MYSQL_PORT=3306
    - buildConfiguration=${buildConfiguration}
    - publishTargetFramework=${publishTargetFramework}
    depends_on:
    - servicestackredis
    - stackexchangeredis
    - elasticsearch6
    - elasticsearch5
    - sqlserver
    - mongo
    - postgres
    - mysql
